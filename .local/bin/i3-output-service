#!/usr/bin/env python

# Run the following command in a shell once to make it work:
#
# sudo apt install python3 python-is-python3
# systemctl --user daemon-reload
# systemctl --user start i3-output.service
#
# Check that the service is running with:
#
# systemctl --user status i3-output.service

from outputs import Outputs
from outputs_watcher import OutputsWatcher
import os
import subprocess
import time


def main():
    outputs_watcher = OutputsWatcher(os.path.expanduser("~/.local/share/xorg/Xorg.0.log"))

    while True:
        print("Check")
        if outputs_watcher.has_changes():
            print("Output changes")

            # Wait for the monitor to become alive?
            # i3-output --type auto many times doesn't enable the monitor.
            # However it works to enable the laptop scren.
            time.sleep(5)

            print("Get outputs")
            outputs = Outputs()

            if len(outputs) == 1:
                print("Enable laptop")
                command = "i3-output --type laptop"
                subprocess.run(command, shell=True)
            elif len(outputs) == 2:
                print("Enable monitor")
                command = "i3-output --type monitor"
                subprocess.run(command, shell=True)

            # If there are changes, wait
            time.sleep(5)

            while not outputs.has_enabled():
                print("Output not enabled")
                if len(outputs) == 1:
                    print("Enable laptop")
                    command = "i3-output --type laptop"
                    subprocess.run(command, shell=True)
                elif len(outputs) == 2:
                    print("Enable monitor")
                    command = "i3-output --type monitor"
                    subprocess.run(command, shell=True)
                time.sleep(5)

            # Manipulating the outputs generates known changes that we don't want to monitor, so we
            # reset the watcher.
            outputs_watcher.reset()
        time.sleep(1)


if __name__ == "__main__":
    main()
