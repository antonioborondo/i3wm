#!/usr/bin/env python

####################################################################################################
# Control the output.
#
# Run the following command in a shell once to make it work:
#
# sudo apt install python3 python-is-python3
####################################################################################################

import subprocess
from enum import Enum
import argparse


def get_outputs_info():
    command = (
        "xrandr | grep -A 1 --no-group-separator \" connected\" | awk '{print $1}'"
    )
    result = subprocess.run(command, shell=True, capture_output=True, text=True)

    lines = result.stdout.strip().split("\n")
    output_info = []
    for i in range(0, len(lines) - 1, 2):
        output_id = lines[i]
        output_resolution = lines[i + 1]
        output_info.append((output_id, output_resolution))

    return output_info


def deactivate_outputs(outputs_info):
    for output_id, _ in outputs_info:
        command = f"xrandr --output {output_id} --off"
        subprocess.run(command, shell=True)


class OutputType(Enum):
    AUTO = 1
    PRIMARY = 2
    SECONDARY = 3


def activate_output(outputs_info, output_type: OutputType):
    for output_id, output_resolution in outputs_info:
        if output_id == "eDP-1" and output_type == OutputType.SECONDARY:
            continue
        elif output_id != "eDP-1" and output_type == OutputType.PRIMARY:
            continue
        else:
            command = f"xrandr --output {output_id} --primary --mode {output_resolution} --pos 0x0 --rotate normal"
            subprocess.run(command, shell=True)
            return

def get_output_type(outputs_info, output_type):
    if output_type == "auto":
        if len(outputs_info) == 1:
            return OutputType.PRIMARY
        else:
            return OutputType.SECONDARY
    elif output_type == "primary":
        return OutputType.PRIMARY
    elif output_type == "secondary":
        return OutputType.SECONDARY


def main():
    arguments_parser = argparse.ArgumentParser(description="Control the monitor.")

    arguments_parser.add_argument(
        "--type",
        choices=["auto", "primary", "secondary"],
        default="auto",
        help="monitor type",
    )

    arguments = arguments_parser.parse_args()

    outputs_info = get_outputs_info()

    output_type = get_output_type(outputs_info, arguments.type)

    deactivate_outputs(outputs_info)

    activate_output(outputs_info, output_type)


if __name__ == "__main__":
    main()
