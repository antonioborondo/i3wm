#!/usr/bin/env python

####################################################################################################
# Control the output.
#
# Run the following command in a shell once to make it work:
#
# sudo apt install python3 python-is-python3
####################################################################################################

from dataclasses import dataclass
from enum import Enum
from typing import List
import argparse
import subprocess


class OutputType(Enum):
    PRIMARY = 1
    SECONDARY = 2


@dataclass
class Output:
    id: str
    resolution: str

    def type(self) -> OutputType:
        if self.id == "eDP-1":
            return OutputType.PRIMARY
        else:
            return OutputType.SECONDARY


def get_outputs() -> List[Output]:
    command = (
        "xrandr | grep -A 1 --no-group-separator \" connected\" | awk '{print $1}'"
    )
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
    lines = result.stdout.strip().split("\n")

    outputs: List[Output] = []
    for i in range(0, len(lines) - 1, 2):
        output = Output(lines[i], lines[i + 1])
        outputs.append(output)

    return outputs


def get_output_type(outputs, output_type) -> OutputType:
    if output_type == "auto":
        if len(outputs) == 1:
            return OutputType.PRIMARY
        else:
            return OutputType.SECONDARY
    elif output_type == "primary":
        return OutputType.PRIMARY
    elif output_type == "secondary":
        return OutputType.SECONDARY


def enable_output(output: Output):
    command = f"xrandr --output {output.id} --mode {output.resolution} --pos 0x0 --primary --rotate normal"
    subprocess.run(command, shell=True)


def disable_output(output: Output):
    command = f"xrandr --output {output.id} --off"
    subprocess.run(command, shell=True)


def enable_outputs(outputs: List[Output], output_type: OutputType):
    for output in outputs:
        if output.type() == output_type:
            enable_output(output)
        else:
            disable_output(output)


def main():
    arguments_parser = argparse.ArgumentParser(description="Control the output.")

    arguments_parser.add_argument(
        "--type",
        choices=["auto", "primary", "secondary"],
        default="auto",
        help="output type",
    )

    arguments = arguments_parser.parse_args()

    outputs = get_outputs()

    output_type = get_output_type(outputs, arguments.type)

    enable_outputs(outputs, output_type)


if __name__ == "__main__":
    main()
